#include "simple_shell.h"

/**
  * main - Creates a loop for to receive user call functions, parse the input
  * and check program type to execute a program file if success
  * @argc: number of command line arguments
  * @argv: command line arguments
  * Return: 0, success, otherwise errors
  */
int main(int argc, char **argv)
{
	char *buffer, **args;
	size_t len;
	int loops = 1, fd;
	(void)argc;

	signal(SIGINT, sighandle);
/*
	if (argc == 2)
	{
		fd = open(argv[1], O_RDONLY);
		if (fd == -1)
		{
			if (errno == EACCES)
				exit(126);
			if (errno == ENOENT)
			{
				/*	_eputs(av[0]);
				_eputs(": 0: Can't open ");
				_eputs(av[1]);
				_eputchar('\n');
				_eputchar(BUF_FLUSH); 
				write(STDERR_FILENO, "NO", 2);
				exit(127);
			}
			return (EXIT_FAILURE);
		}
	}
*/
	while (1)
	{
		buffer = NULL, args = NULL;
		len = 0;

		if (isatty(STDIN_FILENO))
			write(STDOUT_FILENO, "$ ", 2);

		if (getline(&buffer, &len, stdin) == EOF)
		{
			if (isatty(STDIN_FILENO))
				write(STDOUT_FILENO, "\n", 1);
			exit(EXIT_FAILURE);
		}
		args = get_tokens(buffer);
		if (args != NULL && args[0] != NULL)
		{
			if (init_builtin(args, buffer))
				continue;

			if (init_fileprogram(args) == -1)
				errmess(argv, args, loops);
		}
		free_function(1, buffer);
		free_function(2, args);
		loops++;
	}
	return (0);
}
